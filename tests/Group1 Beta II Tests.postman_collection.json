{
	"info": {
		"_postman_id": "5a9d8f5e-3b7c-4b94-8599-092ba1921184",
		"name": "Group1 Beta II Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43598426",
		"_collection_link": "https://noahdangerfield.postman.co/workspace/Noah-Dangerfield's-Workspace~cbacfb65-b879-4f15-8693-60f9be53bdaa/collection/43598426-5a9d8f5e-3b7c-4b94-8599-092ba1921184?action=share&source=collection_link&creator=43598426"
	},
	"item": [
		{
			"name": "Create test user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"const lastname = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
							"const password = \"changes1\"\r",
							"const username = pm.variables.replaceIn(\"{{$randomAdjective}}\");\r",
							"const role = 1;\r",
							"const phone = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");\r",
							"\r",
							"pm.collectionVariables.set(\"oldPassword\", \"changes1\");\r",
							"pm.collectionVariables.set(\"email\", email);\r",
							"pm.collectionVariables.set(\"newUserBody\", JSON.stringify({firstname, lastname, email, password, username, role, phone}));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// fetch jwt\r",
							"\r",
							"const jwt = pm.response.json().accessToken;\r",
							"pm.collectionVariables.set('jwt', jwt);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{newUserBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "update password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"newPassword\", \"changes2\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"oldPassword\": \"{{oldPassword}}\",\r\n    \"newPassword\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/changePassword",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "update password w/ duplicate failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(400); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"oldPassword\": \"{{oldPassword}}\",\r\n    \"newPassword\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/changePassword",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login w/ new pw",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login w/ old pw failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(400); \r",
							"});\r",
							"\r",
							"pm.test(\"Response text is consistent with having an invalid pw\", () => {\r",
							"    pm.expect(pm.response.json().message).to.equal(\"Invalid Credentials\"); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{oldPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cursor pagination success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Limit and cursor match expected defaults\", () => {\r",
							"    pm.expect(pm.response.json().pagination.limit).to.equal(10); \r",
							"    pm.expect(pm.response.json().pagination.cursor).to.equal(10); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/cursor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"cursor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cursor pagination next page success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Next cursor matches expected value\", () => {\r",
							"    pm.expect(pm.response.json().pagination.cursor).to.equal(20); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/cursor?cursor=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"cursor"
					],
					"query": [
						{
							"key": "cursor",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cursor pagination invalid limit and cursor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Limit and cursor match expected defaults\", () => {\r",
							"    pm.expect(pm.response.json().pagination.limit).to.equal(10); \r",
							"    pm.expect(pm.response.json().pagination.cursor).to.equal(10); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/cursor?cursor=-43&limit=-10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"cursor"
					],
					"query": [
						{
							"key": "cursor",
							"value": "-43"
						},
						{
							"key": "limit",
							"value": "-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Offset pagination success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Limit and offset match expected defaults\", () => {\r",
							"    pm.expect(pm.response.json().pagination.limit).to.equal(10); \r",
							"    pm.expect(pm.response.json().pagination.offset).to.equal(0); \r",
							"});\r",
							"\r",
							"pm.test(\"nextPage matches expected value\", () => {\r",
							"    pm.expect(pm.response.json().pagination.nextPage).to.equal(10); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/offset",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"offset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Offset pagination next page success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Limit matches expected defaults\", () => {\r",
							"    pm.expect(pm.response.json().pagination.limit).to.equal(10);  \r",
							"});\r",
							"\r",
							"pm.test(\"nextPage matches expected value\", () => {\r",
							"    pm.expect(pm.response.json().pagination.nextPage).to.equal(20); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/offset?offset=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"offset"
					],
					"query": [
						{
							"key": "offset",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Offset pagination invalid limit and offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Limit and offset match expected defaults\", () => {\r",
							"    pm.expect(pm.response.json().pagination.limit).to.equal(10); \r",
							"    pm.expect(pm.response.json().pagination.offset).to.equal(0); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/c/books/offset?limit=-50&offset=-12",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"offset"
					],
					"query": [
						{
							"key": "limit",
							"value": "-50"
						},
						{
							"key": "offset",
							"value": "-12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ratings success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": -1,\r\n    \"rating_3\": -1,\r\n    \"rating_4\": -1,\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/9780439554930",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"9780439554930"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update partial ratings success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": -1,\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/9780439554930",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"9780439554930"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ratings no book w/ ISBN failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(404); \r",
							"});\r",
							"\r",
							"pm.test(\"Message matches expected\", () => {\r",
							"    pm.expect(pm.response.json().message).to.equal(\"No book found to update. Try a different ISBN13\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": -1,\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/1111111111111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"1111111111111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ratings bad ISBN failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(400); \r",
							"});\r",
							"\r",
							"pm.test(\"Message matches expected\", () => {\r",
							"    pm.expect(pm.response.json().message).to.equal(\"Invalid or missing ISBN13 - please refer to documentation\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": -1,\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/23456",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"23456"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ratings bad ratings info failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(400); \r",
							"});\r",
							"\r",
							"pm.test(\"Message matches expected\", () => {\r",
							"    pm.expect(pm.response.json().message).to.equal(\"Missing or malformed rating information. Please refer to documentation\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": \"hello there\",\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/9780439554930",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"9780439554930"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ratings negative final ratings failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 422\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(422); \r",
							"});\r",
							"\r",
							"pm.test(\"Message matches expected\", () => {\r",
							"    pm.expect(pm.response.json().message).to.equal(\"Cannot perform changes - will result in a negative number of ratings\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_1\": -1,\r\n    \"rating_2\": -1000000000,\r\n    \"rating_5\": -1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/c/books/9780439554930",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"c",
						"books",
						"9780439554930"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "newUserBody",
			"value": ""
		},
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "oldPassword",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "newPassword",
			"value": ""
		}
	]
}